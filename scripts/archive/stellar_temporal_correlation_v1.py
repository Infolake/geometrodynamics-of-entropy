#!/usr/bin/env python3
"""
Correla√ß√£o entre Tipos Espectrais Estelares e Dimens√µes Temporais CTMCK
Autor: Guilherme de Camargo
Data: 2025-01-26

An√°lise da rela√ß√£o entre massa estelar, tempo de vida e as tr√™s dimens√µes temporais:
- t‚ÇÅ: Tempo Qu√¢ntico Local (processos nucleares internos)
- t‚ÇÇ: Tempo Relacional Sist√™mico (evolu√ß√£o estelar e intera√ß√µes)
- t‚ÇÉ: Tempo Cosmol√≥gico (escala de forma√ß√£o e morte estelar)
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os

class StellarTemporalAnalysis:
    """Classe para an√°lise da correla√ß√£o estelar-temporal CTMCK"""
    
    def __init__(self):
        # Dados dos tipos espectrais estelares
        self.stellar_data = {
            'Tipo': ['O', 'B', 'A', 'F', 'G', 'K', 'M'],
            'Massa_Solar': [60, 18, 3.2, 1.7, 1.0, 0.8, 0.3],
            'Luminosidade_Solar': [1000000, 20000, 80, 6, 1, 0.4, 0.04],
            'Temp_Superficie_K': [45000, 20000, 8500, 6500, 5500, 4000, 3000],
            'Tempo_Vida_Anos': [3e6, 1e7, 3e8, 3e9, 1e10, 5e10, 1e12],
            'Cor': ['azul', 'azul-branco', 'branco', 'amarelo-branco', 'amarelo', 'laranja', 'vermelho']
        }
        
        self.df = pd.DataFrame(self.stellar_data)
        
        # Calcular √≠ndices temporais CTMCK
        self._calculate_temporal_indices()
    
    def _calculate_temporal_indices(self):
        """Calcula os √≠ndices das tr√™s dimens√µes temporais para cada tipo estelar"""
        
        # t‚ÇÅ (Tempo Qu√¢ntico): Relacionado √† intensidade dos processos nucleares
        # Proporcional √† taxa de fus√£o nuclear (Massa^3.5 aproximadamente)
        self.df['t1_quantum'] = (self.df['Massa_Solar'] ** 3.5) / 1000
        
        # t‚ÇÇ (Tempo Relacional): Relacionado √† evolu√ß√£o estelar e estabilidade
        # Inversamente proporcional √† luminosidade (estrelas mais luminosas evoluem mais r√°pido)
        self.df['t2_relational'] = 1 / np.log10(self.df['Luminosidade_Solar'] + 1)
        
        # t‚ÇÉ (Tempo Cosmol√≥gico): Diretamente relacionado ao tempo de vida estelar
        # Normalizado em escala logar√≠tmica
        self.df['t3_cosmological'] = np.log10(self.df['Tempo_Vida_Anos']) / 12  # Normalizado para escala 0-1
        
        # √çndice de Habitabilidade Temporal (combina√ß√£o das tr√™s dimens√µes)
        # Favorece equil√≠brio: t‚ÇÅ moderado, t‚ÇÇ alto (estabilidade), t‚ÇÉ alto (longevidade)
        self.df['habitability_index'] = (
            np.exp(-2 * (self.df['t1_quantum'] - 0.3)**2) *  # t‚ÇÅ √≥timo ~ 0.3
            self.df['t2_relational'] *                        # t‚ÇÇ maior √© melhor
            self.df['t3_cosmological']                        # t‚ÇÉ maior √© melhor
        )
    
    def create_stellar_temporal_table(self):
        """Cria tabela detalhada com correla√ß√µes temporais"""
        
        print("=" * 100)
        print("CORRELA√á√ÉO ENTRE TIPOS ESPECTRAIS ESTELARES E DIMENS√ïES TEMPORAIS CTMCK")
        print("=" * 100)
        
        # Criar tabela formatada
        table_data = []
        for _, row in self.df.iterrows():
            table_data.append([
                row['Tipo'],
                f"{row['Massa_Solar']:.1f}",
                f"{row['Luminosidade_Solar']:.0e}",
                f"{row['Tempo_Vida_Anos']:.0e}",
                f"{row['t1_quantum']:.3f}",
                f"{row['t2_relational']:.3f}",
                f"{row['t3_cosmological']:.3f}",
                f"{row['habitability_index']:.4f}"
            ])
        
        headers = ['Tipo', 'Massa‚òâ', 'Lum‚òâ', 'Vida(anos)', 't‚ÇÅ(quant)', 't‚ÇÇ(relac)', 't‚ÇÉ(cosmo)', 'Hab.Index']
        
        # Imprimir tabela
        print(f"{'Tipo':<6}{'Massa‚òâ':<8}{'Luminosidade‚òâ':<12}{'Vida(anos)':<12}{'t‚ÇÅ':<10}{'t‚ÇÇ':<10}{'t‚ÇÉ':<10}{'√çndice Hab.':<12}")
        print("-" * 100)
        
        for row in table_data:
            print(f"{row[0]:<6}{row[1]:<8}{row[2]:<12}{row[3]:<12}{row[4]:<10}{row[5]:<10}{row[6]:<10}{row[7]:<12}")
        
        print("\n" + "=" * 100)
        print("INTERPRETA√á√ÉO DAS DIMENS√ïES TEMPORAIS:")
        print("=" * 100)
        print("t‚ÇÅ (Tempo Qu√¢ntico):     Intensidade dos processos nucleares internos")
        print("t‚ÇÇ (Tempo Relacional):   Estabilidade evolutiva e intera√ß√µes sist√™micas") 
        print("t‚ÇÉ (Tempo Cosmol√≥gico):  Longevidade e escala temporal cosmol√≥gica")
        print("√çndice Habitabilidade:   Potencial para desenvolvimento de complexidade")
        print("=" * 100)
    
    def plot_temporal_correlations(self):
        """Cria visualiza√ß√µes das correla√ß√µes temporais"""
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
        
        # Gr√°fico 1: Massa vs Tempo de Vida (cl√°ssico)
        ax1.loglog(self.df['Massa_Solar'], self.df['Tempo_Vida_Anos'], 'o-', linewidth=2, markersize=8)
        for i, tipo in enumerate(self.df['Tipo']):
            ax1.annotate(tipo, (self.df['Massa_Solar'].iloc[i], self.df['Tempo_Vida_Anos'].iloc[i]), 
                        xytext=(5, 5), textcoords='offset points', fontsize=10, fontweight='bold')
        ax1.set_xlabel('Massa Estelar (Massas Solares)')
        ax1.set_ylabel('Tempo de Vida (Anos)')
        ax1.set_title('Rela√ß√£o Massa-Longevidade Estelar')
        ax1.grid(True, alpha=0.3)
        
        # Gr√°fico 2: Tr√™s Dimens√µes Temporais
        x = np.arange(len(self.df))
        width = 0.25
        
        ax2.bar(x - width, self.df['t1_quantum'], width, label='t‚ÇÅ (Qu√¢ntico)', alpha=0.8, color='red')
        ax2.bar(x, self.df['t2_relational'], width, label='t‚ÇÇ (Relacional)', alpha=0.8, color='green')
        ax2.bar(x + width, self.df['t3_cosmological'], width, label='t‚ÇÉ (Cosmol√≥gico)', alpha=0.8, color='blue')
        
        ax2.set_xlabel('Tipo Espectral')
        ax2.set_ylabel('√çndice Temporal Normalizado')
        ax2.set_title('Tr√™s Dimens√µes Temporais CTMCK por Tipo Estelar')
        ax2.set_xticks(x)
        ax2.set_xticklabels(self.df['Tipo'])
        ax2.legend()
        ax2.grid(True, alpha=0.3)
        
        # Gr√°fico 3: √çndice de Habitabilidade Temporal
        colors = plt.cm.viridis(self.df['habitability_index'] / self.df['habitability_index'].max())
        bars = ax3.bar(self.df['Tipo'], self.df['habitability_index'], color=colors)
        ax3.set_xlabel('Tipo Espectral')
        ax3.set_ylabel('√çndice de Habitabilidade Temporal')
        ax3.set_title('Potencial de Habitabilidade Temporal CTMCK')
        ax3.grid(True, alpha=0.3)
        
        # Adicionar valores nas barras
        for bar, valor in zip(bars, self.df['habitability_index']):
            height = bar.get_height()
            ax3.text(bar.get_x() + bar.get_width()/2., height + 0.001,
                    f'{valor:.3f}', ha='center', va='bottom', fontsize=9)
        
        # Gr√°fico 4: Diagrama 3D das Dimens√µes Temporais
        ax4 = fig.add_subplot(224, projection='3d')
        scatter = ax4.scatter(self.df['t1_quantum'], self.df['t2_relational'], self.df['t3_cosmological'],
                             c=self.df['habitability_index'], cmap='plasma', s=100)
        
        # Adicionar labels dos tipos
        for i, tipo in enumerate(self.df['Tipo']):
            ax4.text(self.df['t1_quantum'].iloc[i], self.df['t2_relational'].iloc[i], 
                    self.df['t3_cosmological'].iloc[i], tipo, fontsize=10, fontweight='bold')
        
        ax4.set_xlabel('t‚ÇÅ (Tempo Qu√¢ntico)')
        ax4.set_ylabel('t‚ÇÇ (Tempo Relacional)')
        ax4.set_zlabel('t‚ÇÉ (Tempo Cosmol√≥gico)')
        ax4.set_title('Espa√ßo Temporal 3D CTMCK')
        
        plt.colorbar(scatter, ax=ax4, label='√çndice de Habitabilidade', shrink=0.8)
        
        plt.tight_layout()
        
        # Salvar
        output_dir = '../../figures/diagrams'
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, 'stellar_temporal_correlations.png')
        plt.savefig(output_path, dpi=300, bbox_inches='tight')
        print(f"\n[OK] Gr√°ficos salvos em: {output_path}")
        
        plt.close()
        return output_path
    
    def theoretical_analysis(self):
        """An√°lise te√≥rica detalhada das correla√ß√µes"""
        
        print("\n" + "=" * 100)
        print("AN√ÅLISE TE√ìRICA: CORRELA√á√ÉO ESTELAR-TEMPORAL CTMCK")
        print("=" * 100)
        
        # Encontrar estrela com maior √≠ndice de habitabilidade
        best_star = self.df.loc[self.df['habitability_index'].idxmax()]
        
        print(f"\nüåü ESTRELA √ìTIMA PARA HABITABILIDADE TEMPORAL:")
        print(f"   Tipo: {best_star['Tipo']} (como nosso Sol)")
        print(f"   √çndice de Habitabilidade: {best_star['habitability_index']:.4f}")
        print(f"   t‚ÇÅ (Qu√¢ntico): {best_star['t1_quantum']:.3f}")
        print(f"   t‚ÇÇ (Relacional): {best_star['t2_relational']:.3f}")
        print(f"   t‚ÇÉ (Cosmol√≥gico): {best_star['t3_cosmological']:.3f}")
        
        print(f"\nüìä INSIGHTS DA TEORIA CTMCK:")
        print(f"   ‚Ä¢ Estrelas tipo O/B: Alto t‚ÇÅ (processos qu√¢nticos intensos), baixo t‚ÇÉ (vida curta)")
        print(f"   ‚Ä¢ Estrelas tipo G: Equil√≠brio √≥timo das tr√™s dimens√µes temporais")
        print(f"   ‚Ä¢ Estrelas tipo M: Baixo t‚ÇÅ, alto t‚ÇÉ, mas evolu√ß√£o muito lenta")
        
        print(f"\nüî¨ IMPLICA√á√ïES PARA HABITABILIDADE:")
        print(f"   ‚Ä¢ Complexidade requer equil√≠brio temporal multidimensional")
        print(f"   ‚Ä¢ Estrelas G oferecem 'zona de Goldilocks temporal'")
        print(f"   ‚Ä¢ Teoria CTMCK explica por que vida complexa favorece estrelas tipo solar")
        
        print("=" * 100)
    
    def save_data_table(self):
        """Salva tabela de dados em CSV"""
        output_dir = '../../data/processed'
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, 'stellar_temporal_correlations.csv')
        self.df.to_csv(output_path, index=False)
        print(f"[OK] Dados salvos em: {output_path}")
        return output_path

def main():
    """Fun√ß√£o principal"""
    print("Iniciando An√°lise de Correla√ß√£o Estelar-Temporal CTMCK...")
    
    # Criar inst√¢ncia da an√°lise
    analysis = StellarTemporalAnalysis()
    
    # Executar an√°lises
    analysis.create_stellar_temporal_table()
    analysis.theoretical_analysis()
    plot_path = analysis.plot_temporal_correlations()
    data_path = analysis.save_data_table()
    
    print(f"\n‚úÖ An√°lise completa!")
    print(f"üìä Gr√°ficos: {plot_path}")
    print(f"üìÑ Dados: {data_path}")

if __name__ == "__main__":
    main() 